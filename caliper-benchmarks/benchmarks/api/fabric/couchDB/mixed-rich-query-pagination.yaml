---
test:
  name: fixed-asset-mixed-rich-query-pagination-couchDB
  description: This is a duration based benchmark targeting a Hyperledger Fabric network with a CouchDB world state database using the `fixed-asset` NodeJS chaincode contract that is interacted with via
    a Fabric-SDK-Node Gateway. Each test round invokes the 'pageinatedRichQuery' chaincode method.  Successive rounds increase the pagesize of retrieved assets.
  workers:
    type: local
    number: 4
  rounds:
  - label: mixed-rich-query-evaluate-10
    description: Test a evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRichQuery`.  This method performs a paginated rich query, with a passed pagesize of 10 and query string that matches all assets created by the calling client. Each returned asset is of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 5, startingTps: 5} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000]
      assets: 8000
      pagesize: '10'
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-rich-query-asset.js
  - label: mixed-rich-query-evaluate-20
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRichQuery`. This method performs a paginated rich query, with a passed pagesize of 20 and query string that matches all assets created by the calling client. Each returned asset is of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 5, startingTps: 5} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000]
      pagesize: '20'
      nosetup: true
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-rich-query-asset.js
  - label: mixed-rich-query-evaluate-50
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRichQuery`. This method performs a paginated rich query, with a passed pagesize of 50 and query string that matches all assets created by the calling client. Each returned asset is of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 5, startingTps: 5} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000]
      pagesize: '50'
      nosetup: true
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-rich-query-asset.js
  - label: mixed-rich-query-evaluate-100
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRichQuery`. This method performs a paginated rich query, with a passed pagesize of 100 and query string that matches all assets created by the calling client. Each returned asset is of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 5, startingTps: 5} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000]
      pagesize: '100'
      nosetup: true
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-rich-query-asset.js
  - label: mixed-rich-query-evaluate-200
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRichQuery`. This method performs a paginated rich query, with a passed pagesize of 200 and query string that matches all assets created by the calling client. Each returned asset is of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 5, startingTps: 5} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000]
      pagesize: '200'
      nosetup: true
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-rich-query-asset.js
  - label: mixed-rich-query-evaluate-500
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRichQuery`. This method performs a paginated rich query, with a passed pagesize of 500 and query string that matches all assets created by the calling client. Each returned asset is of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 5, startingTps: 5} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000]
      pagesize: '500'
      nosetup: true
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-rich-query-asset.js
monitor:
  type:
  - prometheus
  prometheus:  
    url: "http://localhost:9090"
    push_url: "http://localhost:9091"
    metrics:
      ignore: [prometheus, pushGateway, cadvisor, grafana, node-exporter, ca.org1.example.com, ca.org2.example.com]
      include:
        Avg Memory (MB):
          query: sum(container_memory_rss{name=~".+"}) by (name)
          step: 10
          label: name		
          statistic: avg
          multiplier: 0.000001
        CPU (%):
          query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: avg
          multiplier: 100
        Network In (MB):
          query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Network Out (MB):
          query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Disc Write (MB):
          query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Disc Read (MB):
          query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
observer:
  type: prometheus
  interval: 10
