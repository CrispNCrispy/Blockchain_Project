---
test:
  name: delete-asset-batch-levelDB
  description: This is a duration based benchmark targeting a Hyperledger Fabric network with a LevelDB world state database using the `fixed-asset` NodeJS chaincode contract that is interacted with via
    a Fabric-SDK-Node Gateway. Each test round invokes the `deleteAssetsFromBatch` API method. Successive rounds delete a-priori created assets of larger byte size.
  workers:
    type: local
    number: 10
  rounds:
  - label: delete-asset-batch-1-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 1 UUID that matches an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 4000 # max number = (arguments.assets/assets.batchsize)
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 4000
      bytesize: 8000
      batchsize: 1
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-10-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 10 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 4000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 40000
      bytesize: 8000
      batchsize: 10
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-20-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 20 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 4000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 80000
      bytesize: 8000
      batchsize: 20
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-30-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 30 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 1000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 30000
      bytesize: 8000
      batchsize: 30
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-40-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 40 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 1000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 40000
      bytesize: 8000
      batchsize: 40
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-50-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 50 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 500
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 25000
      bytesize: 8000
      batchsize: 50
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-20-8000-fixed-tps
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 20 UUIDs that each match an asset of size 8000 bytes at a fixed TPS.
    chaincodeId: fixed-asset
    txNumber: 4000
    rateControl: { type: fixed-rate, opts: { tps: 30 }}
    arguments:
      create_sizes: [8000]
      assets: 80000
      bytesize: 8000
      batchsize: 20
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
monitor:
  type:
  - prometheus
  prometheus:  
    url: "http://localhost:9090"
    push_url: "http://localhost:9091"
    metrics:
      ignore: [prometheus, pushGateway, cadvisor, grafana, node-exporter, ca.org1.example.com, ca.org2.example.com]
      include:
        Avg Memory (MB):
          query: sum(container_memory_rss{name=~".+"}) by (name)
          step: 10
          label: name		
          statistic: avg
          multiplier: 0.000001
        CPU (%):
          query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: avg
          multiplier: 100
        Network In (MB):
          query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Network Out (MB):
          query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Disc Write (MB):
          query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Disc Read (MB):
          query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
observer:
  type: prometheus
  interval: 10

